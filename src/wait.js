/**
 * @Author: Training
 * @desc 给定一个含有 n 个正整数的数组和一个正整数 s ，
 *    找出该数组中满足其和 ≥ s 的长度最小的连续子数组。
 *    如果不存在符合条件的连续子数组，返回 0。
 *    示例:
 *      输入: s = 7, nums = [2,3,1,2,4,3]
 *      输出: 2
 *      解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。
 * @think
 */
export let minSubArrayLen = function(s, nums) {
  //...等后面再补吧
};
/**
 * @Author: Training
 * @desc  删除排序数组中的重复项
 * @params 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
 * 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
 *  示例 1:
 *    给定数组 nums = [1,1,2],
 *    函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
 *    你不需要考虑数组中超出新长度后面的元素。
 */
export let removeDuplicates = function(nums) {

};